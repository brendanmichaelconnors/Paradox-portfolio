## Load functions and libraries for analysis
source("functions.R")
library(MASS)
library(reshape)
library(mvtnorm)
library(gsl)
library(gdata)
library(graphics)
library(fields)
library(dichromat)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(viridis)
# define characteristics of population complex
pops <- 12 # of populations (MUST BE EVEN)
max.a <- 7 # maximum productivity
min.a <- 2 # minimum productivity
steps <- 10 # of steps between high and low heterogenity
equ_spw <- 40000 # equilibrium abundance (assumes all pops are the same size)
min_cor <- -0.1 # minimum value of degree of correlation (with 10 pops cannot go lower than ... )
inputs <- hetero_prod_func(pops, max.a, min.a, steps, equ_spw,"No") # generate matrix of alphas and betas
alpha<- inputs$alphas[10,]
beta<- inputs$betas[10,]
Ro <- log(alpha)/beta; sum(Ro)
Smsy <- (1-lambert_W0(exp(1-log(alpha))))/beta
Uopt <- round(0.5* log(alpha)-0.07* log(alpha)^2,digits=2)
ny = 50
phi <- 0.4
rho <- 0.6
episd <- 0.6
Preturn <- c(0,0,1,0)
for.error <- 0.1
OU <- 0
num.sims <- 3
time_period <- c(48:51)
# high risk, low mgmt control
control <- 0
MSY.add <- 1
sim_output <- matrix(NA,pops,4,dimnames=list(NULL,c("S_Smsy","F_Fmsy","control","risk")))
sim_output.2 <- matrix(NA,pops,4,dimnames=list(NULL,c("S_Smsy","F_Fmsy","control","risk")))
source("MSY_hcr_function.R")
for (i in 1:num.sims){
out <- process(ny, Ro, rho, phi, Preturn, U, alpha, beta, control, MSY.add, for.error)
if(i==1){
sim_output[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output[,3] <- rep(control,pops)
sim_output[,4] <- rep(MSY.add,pops)
}else{
sim_output.2[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output.2[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output.2[,3] <- rep(control,pops)
sim_output.2[,4] <- rep(MSY.add,pops)
sim_output <- rbind(sim_output,sim_output.2)
}
}
full.sims.top <- sim_output
# high risk, high mgmt control
control <- 0.85
MSY.add <- 1
source("MSY_hcr_function.R")
for (i in 1:num.sims){
out <- process(ny, Ro, rho, phi, Preturn, U, alpha, beta, control, MSY.add, for.error)
if(i==1){
sim_output[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output[,3] <- rep(control,pops)
sim_output[,4] <- rep(MSY.add,pops)
}else{
sim_output.2[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output.2[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output.2[,3] <- rep(control,pops)
sim_output.2[,4] <- rep(MSY.add,pops)
sim_output <- rbind(sim_output,sim_output.2)
}
}
full.sims.top <- rbind(full.sims.top,sim_output)
full.sims.top <- as.data.frame(full.sims.top)
full.sims.top[,3] <- as.factor(full.sims.top[,3])
full.sims.top[,4] <- as.factor(full.sims.top[,4])
full.sims.top <- full.sims.top[complete.cases(full.sims.top),]
# low risk, low mgmt control
control <- 0
MSY.add <- 0.5
sim_output <- matrix(NA,pops,4,dimnames=list(NULL,c("S_Smsy","F_Fmsy","control","risk")))
sim_output.2 <- matrix(NA,pops,4,dimnames=list(NULL,c("S_Smsy","F_Fmsy","control","risk")))
source("MSY_hcr_function.R")
for (i in 1:num.sims){
out <- process(ny, Ro, rho, phi, Preturn, U, alpha, beta, control, MSY.add, for.error)
if(i==1){
sim_output[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output[,3] <- rep(control,pops)
sim_output[,4] <- rep(MSY.add,pops)
}else{
sim_output.2[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output.2[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output.2[,3] <- rep(control,pops)
sim_output.2[,4] <- rep(MSY.add,pops)
sim_output <- rbind(sim_output,sim_output.2)
}
}
full.sims.bottom <- sim_output
# low risk, high mgmt control
control <- 0.85
MSY.add <- 0.5
source("MSY_hcr_function.R")
for (i in 1:num.sims){
out <- process(ny, Ro, rho, phi, Preturn, U, alpha, beta, control, MSY.add, for.error)
if(i==1){
sim_output[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output[,3] <- rep(control,pops)
sim_output[,4] <- rep(MSY.add,pops)
}else{
sim_output.2[,1] <- apply(out$S[48:51,],c(2),mean)/Smsy
sim_output.2[,2] <- apply(out$H[48:51,]/out$N[48:51,],c(2),mean)/Uopt
sim_output.2[,3] <- rep(control,pops)
sim_output.2[,4] <- rep(MSY.add,pops)
sim_output <- rbind(sim_output,sim_output.2)
}
}
full.sims.bottom <- rbind(full.sims.bottom,sim_output)
full.sims.bottom <- as.data.frame(full.sims.bottom)
full.sims.bottom[,3] <- as.factor(full.sims.bottom[,3])
full.sims.bottom[,4] <- as.factor(full.sims.bottom[,4])
full.sims.bottom <- full.sims.bottom[complete.cases(full.sims.bottom),]
btml <- rbind(full.sims.top[which(full.sims.top$control=="0"),],full.sims.bottom[which(full.sims.bottom$control=="0"),])
btmr <- rbind(full.sims.top[which(full.sims.top$control=="0.85"),],full.sims.bottom[which(full.sims.bottom$control=="0.85"),])
##=============================================================================
## Multi panel plot using ggplot code
## January 23, 2019
##=============================================================================
library(MASS)
library(ggplot2)
library(gridExtra)
# -----------------------------------------------------------------------------
# Panel plot for sockey systems
# -----------------------------------------------------------------------------
systems <- c("Bristol Bay", "Fraser", "Skeena")
decades <- c("1970s", "1980s", "1990s", "2000s")
System.all <- list()
for(j in 1:length(systems)) {
temp.S <- read.csv(paste(systems[j], "_Smsy.csv", sep=""), header=T)
colnames(temp.S) <- c("lake", "meanSmsy", "SlowerCI", "SupperCI",
"S1970s", "S1980s", "S1990s", "S2000s")
temp.U <- read.csv(paste(systems[j], "_Umsy.csv", sep=""), header=T)
for(i in 1:length(decades)) {
S.msy.temp <- cbind(temp.S[(4+i)]/temp.S$meanSmsy,
temp.S[(4+i)]/temp.S$SlowerCI,
temp.S[(4+i)]/temp.S$SupperCI)
colnames(S.msy.temp) <- c(paste("S_Smsy_", decades[i], sep=""),
paste("SLCL_", decades[i], sep=""),
paste("SUCL_", decades[i], sep=""))
temp.S <- cbind(temp.S, S.msy.temp)
U.msy.temp <- cbind(temp.U[(4+i)]/temp.U$meanUmsy,
temp.U[(4+i)]/(temp.U$lowerCI),
temp.U[(4+i)]/(temp.U$upperCI))
colnames(U.msy.temp) <- c(paste("U_Umsy_", decades[i], sep=""),
paste("ULCL_", decades[i], sep=""),
paste("UUCL_", decades[i], sep=""))
temp.U <- cbind(temp.U, U.msy.temp)
sys.name <- rep(systems[j], nrow(temp.U))
}
System.all[[j]] <- cbind(system=sys.name, temp.S, temp.U)
}
all.dat <- do.call(rbind.data.frame, System.all)
View(all.dat)
# Bristol Bay first
dat = all.dat[all.dat$system==systems[1],]
dat
